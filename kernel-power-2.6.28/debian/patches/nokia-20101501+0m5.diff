diff -Nurp kernel-2.6.28-20100903+0m5/arch/arm/mach-omap2/board-rx51-camera.c kernel-2.6.28-20101501+0m5/arch/arm/mach-omap2/board-rx51-camera.c
--- kernel-2.6.28-20100903+0m5/arch/arm/mach-omap2/board-rx51-camera.c	2012-12-16 13:28:34.748315692 +0100
+++ kernel-2.6.28-20101501+0m5/arch/arm/mach-omap2/board-rx51-camera.c	2012-12-16 13:30:14.168314148 +0100
@@ -561,7 +561,7 @@ static int rx51_adp1653_power_on(struct
 	gpio_set_value(ADP1653_GPIO_ENABLE, 1);
 
 	/* Some delay is apparently required. */
-	udelay(20);
+	udelay(400);
 
 	return 0;
 }
diff -Nurp kernel-2.6.28-20100903+0m5/arch/arm/mach-omap2/pm34xx.c kernel-2.6.28-20101501+0m5/arch/arm/mach-omap2/pm34xx.c
--- kernel-2.6.28-20100903+0m5/arch/arm/mach-omap2/pm34xx.c	2012-12-16 13:29:04.844315224 +0100
+++ kernel-2.6.28-20101501+0m5/arch/arm/mach-omap2/pm34xx.c	2012-12-16 13:30:14.172314148 +0100
@@ -45,6 +45,7 @@
 #include <mach/dma.h>
 #include <mach/vrfb.h>
 #include <mach/ssi.h>
+#include <mach/omap-pm.h>
 
 #include <asm/tlbflush.h>
 
@@ -102,6 +103,8 @@
 #define CONTROL_PADCONF_MCBSP4_DX	0x158
 #define CONTROL_PADCONF_UART1_TX	0x14c
 
+#define VSEL_1200	0x30
+
 static u16 ssi_rx_rdy;
 static u16 ssi_tx_dat;
 static u16 ssi_tx_flag;
@@ -520,6 +523,7 @@ void omap_sram_idle(void)
 	u32 sdrc_pwr = 0;
 	int per_state_modified = 0;
 	int core_saved_state = PWRDM_POWER_ON;
+	static int prev_dpll3_div = 0;
 
 	if (!_omap_sram_idle)
 		return;
@@ -551,7 +555,7 @@ void omap_sram_idle(void)
 	if (pwrdm_read_pwrst(neon_pwrdm) == PWRDM_POWER_ON) {
 		pwrdm_set_next_pwrst(neon_pwrdm, mpu_next_state);
 		neon_next_state = mpu_next_state;
-		if (neon_next_state == PWRDM_POWER_OFF)
+		if (neon_next_state == PWRDM_POWER_OFF) 
 			omap3_save_neon_context();
 	}
 
@@ -562,6 +566,12 @@ void omap_sram_idle(void)
 	usb_state = pwrdm_read_pwrst(usb_pwrdm);
 	per_next_state = pwrdm_read_next_pwrst(per_pwrdm);
 
+	if (dss_state == PWRDM_POWER_ON &&
+		core_next_state < PWRDM_POWER_INACTIVE) {
+		core_next_state = PWRDM_POWER_INACTIVE;
+		pwrdm_set_next_pwrst(core_pwrdm, PWRDM_POWER_ON);
+	}
+
 	/* Check if PER domain can enter OFF or not */
 	if (per_next_state == PWRDM_POWER_OFF) {
 		if ((cm_read_mod_reg(OMAP3430_PER_MOD, CM_IDLEST) &
@@ -679,6 +689,33 @@ void omap_sram_idle(void)
 				  OMAP3_PRM_CLKSETUP_OFFSET);
 	}
 
+	if (core_next_state < PWRDM_POWER_INACTIVE) {
+		u32 clksel1_pll, v;
+
+		clksel1_pll = cm_read_mod_reg(PLL_MOD, OMAP3430_CM_CLKSEL1_PLL);
+		prev_dpll3_div = clksel1_pll >> 28;
+		if (prev_dpll3_div == 1) {
+			/* L3 @ 166Mhz */
+			struct omap_sdrc_params *sdrc_cs0;
+			struct omap_sdrc_params *sdrc_cs1;
+
+			omap2_sdrc_get_params(83*1000*1000, &sdrc_cs0, &sdrc_cs1);
+			/* scale down to 83Mhz, use worst case delay for clock stabilization */
+			omap3_configure_core_dpll(4, 0, 28, 0, sdrc_cs0->rfr_ctrl, sdrc_cs0->mr, 0, 0);
+
+			/* increase voltage to 1.2V */
+			sr_voltagescale_vcbypass(PRCM_VDD2_OPP3, PRCM_VDD2_OPP2, VSEL_1200, l3_opps[3].vsel);
+		} else {
+			/* L3 @ 83Mhz, increase voltage to 1.2V  */
+			sr_voltagescale_vcbypass(PRCM_VDD2_OPP3, PRCM_VDD2_OPP2, VSEL_1200, l3_opps[2].vsel);
+		}
+
+		/* enable DPLL3 autoidle */
+		v = cm_read_mod_reg(PLL_MOD, CM_AUTOIDLE);
+		v |= 1;
+		cm_write_mod_reg(v, PLL_MOD, CM_AUTOIDLE);
+	}	
+
 	memcpy(save_sdrc_counters, _sdrc_counters, sizeof(save_sdrc_counters));
 
 	/*
@@ -701,6 +738,51 @@ void omap_sram_idle(void)
 	if (neon_next_state == PWRDM_POWER_OFF)
 		omap3_restore_neon_context();
 
+	if (core_next_state < PWRDM_POWER_INACTIVE) {
+		if (pwrdm_read_prev_pwrst(core_pwrdm) == PWRDM_POWER_OFF) {
+			u32 clksel1_pll;
+
+			/* ROM code restored the scratchpad settings. So DPLL3 autoidle is
+			 * disabled and L3 clock is back to the value before entering this function.
+			 * This means we only have to lower the voltage if L3 runs at 83Mhz
+			 */
+			clksel1_pll = cm_read_mod_reg(PLL_MOD, OMAP3430_CM_CLKSEL1_PLL);
+			if ((clksel1_pll >> 28) == 2) {
+				/* restore VDD2 OPP2 voltage */
+				sr_voltagescale_vcbypass(PRCM_VDD2_OPP2, PRCM_VDD2_OPP3, l3_opps[2].vsel, VSEL_1200);
+			}
+			else {
+				/* restore VDD2 OPP3 voltage */
+				sr_voltagescale_vcbypass(PRCM_VDD2_OPP2, PRCM_VDD2_OPP3, l3_opps[3].vsel, VSEL_1200);
+			}
+		}
+		else {
+			u32 v;
+
+			/* disable DPLL3 autoidle */
+			v = cm_read_mod_reg(PLL_MOD, CM_AUTOIDLE);
+			v &= ~0x7;
+			cm_write_mod_reg(v, PLL_MOD, CM_AUTOIDLE);
+
+			if (prev_dpll3_div == 1) {
+				/* restore L3 to 166Mhz */
+				struct omap_sdrc_params *sdrc_cs0;
+				struct omap_sdrc_params *sdrc_cs1;
+
+				omap2_sdrc_get_params(166*1000*1000, &sdrc_cs0, &sdrc_cs1);
+				/* scale up to 166Mhz, use worst case delay for clock stabilization */
+				omap3_configure_core_dpll(2, 0, 28, 1, sdrc_cs0->rfr_ctrl, sdrc_cs0->mr, 0, 0);
+
+				/* restore VDD2 OPP3 voltage */
+				sr_voltagescale_vcbypass(PRCM_VDD2_OPP2, PRCM_VDD2_OPP3, l3_opps[3].vsel, VSEL_1200);
+			}
+			else {
+				/* restore VDD2 OPP2 voltage */
+				sr_voltagescale_vcbypass(PRCM_VDD2_OPP2, PRCM_VDD2_OPP3, l3_opps[2].vsel, VSEL_1200);
+			}
+		}
+	}
+
 	/* CORE */
 	if (core_next_state < PWRDM_POWER_ON) {
 		core_prev_state = pwrdm_read_prev_pwrst(core_pwrdm);
@@ -1136,7 +1218,7 @@ static void __init prcm_setup_regs(void)
 			 MPU_MOD,
 			 CM_AUTOIDLE2);
 	cm_write_mod_reg((1 << OMAP3430_AUTO_PERIPH_DPLL_SHIFT) |
-			 (1 << OMAP3430_AUTO_CORE_DPLL_SHIFT),
+			 (0 << OMAP3430_AUTO_CORE_DPLL_SHIFT),
 			 PLL_MOD,
 			 CM_AUTOIDLE);
 	cm_write_mod_reg(1 << OMAP3430ES2_AUTO_PERIPH2_DPLL_SHIFT,
diff -Nurp kernel-2.6.28-20100903+0m5/arch/arm/mach-omap2/smartreflex.c kernel-2.6.28-20101501+0m5/arch/arm/mach-omap2/smartreflex.c
--- kernel-2.6.28-20100903+0m5/arch/arm/mach-omap2/smartreflex.c	2012-12-16 13:28:45.472315523 +0100
+++ kernel-2.6.28-20101501+0m5/arch/arm/mach-omap2/smartreflex.c	2012-12-16 13:30:17.084314106 +0100
@@ -1004,6 +1004,11 @@ static ssize_t omap_sr_vdd2_autocomp_sto
 		return -EINVAL;
 	}
 
+	if (value != 0) {
+		pr_warning("VDD2 smartreflex is broken\n");
+		return -EINVAL;
+	}
+
 	mutex_lock(&dvfs_mutex);
 
 	current_vdd2opp_no = resource_get_level("vdd2_opp");
diff -Nurp kernel-2.6.28-20100903+0m5/arch/arm/mach-omap2/ssi.c kernel-2.6.28-20101501+0m5/arch/arm/mach-omap2/ssi.c
--- kernel-2.6.28-20100903+0m5/arch/arm/mach-omap2/ssi.c	2012-12-16 13:28:34.756315692 +0100
+++ kernel-2.6.28-20101501+0m5/arch/arm/mach-omap2/ssi.c	2012-12-16 13:30:14.172314148 +0100
@@ -378,7 +378,7 @@ static void enable_dpll3_autoidle(void)
 	u32 v;
 
 	v = cm_read_mod_reg(PLL_MOD, CM_AUTOIDLE);
-	v |= 1;
+	v |= 0;
 	cm_write_mod_reg(v, PLL_MOD, CM_AUTOIDLE);
 }
 
diff -Nurp kernel-2.6.28-20100903+0m5/drivers/mmc/host/omap_hsmmc.c kernel-2.6.28-20101501+0m5/drivers/mmc/host/omap_hsmmc.c
--- kernel-2.6.28-20100903+0m5/drivers/mmc/host/omap_hsmmc.c	2012-12-16 13:29:04.852315222 +0100
+++ kernel-2.6.28-20101501+0m5/drivers/mmc/host/omap_hsmmc.c	2012-12-16 13:30:14.172314148 +0100
@@ -28,6 +28,7 @@
 #include <linux/clk.h>
 #include <linux/mmc/host.h>
 #include <linux/mmc/core.h>
+#include <linux/mmc/card.h>
 #include <linux/io.h>
 #include <linux/semaphore.h>
 #include <asm/dma.h>
@@ -97,6 +98,8 @@
 #define SOFTRESET		(1 << 1)
 #define RESETDONE		(1 << 0)
 
+#define SAMSUNG_MANUF_ID	0x15
+
 /*
  * FIXME: Most likely all the data using these _DEVID defines should come
  * from the platform_data, or implemented in controller and slot specific
@@ -1283,10 +1286,24 @@ static int omap_hsmmc_enabled_to_disable
 	return msecs_to_jiffies(OMAP_MMC_SLEEP_TIMEOUT);
 }
 
+/* JEDEC specification says the nand core voltage can be shut off while the
+   card is sleeping. Some cards are known not to be JEDEC compatible with
+   this respect */
+static int omap_hsmmc_full_sleep(struct mmc_card *card)
+{
+	if (card->cid.manfid == SAMSUNG_MANUF_ID) {
+		unsigned int gbytes = card->ext_csd.sectors >> (30 - 9);
+		if (gbytes > 24 && gbytes < 48)
+			return 0;
+	}
+
+	return 1;
+}
+
 /* Handler for [DISABLED -> REGSLEEP / CARDSLEEP] transition */
 static int omap_hsmmc_disabled_to_sleep(struct omap_hsmmc_host *host)
 {
-	int err, new_state;
+	int err, new_state, sleep;
 
 	if (!mmc_try_claim_host(host->mmc))
 		return 0;
@@ -1304,9 +1321,12 @@ static int omap_hsmmc_disabled_to_sleep(
 	} else {
 		new_state = REGSLEEP;
 	}
+
+	sleep = omap_hsmmc_full_sleep(host->mmc->card) &&
+		(new_state == CARDSLEEP);
 	if (mmc_slot(host).set_sleep)
 		mmc_slot(host).set_sleep(host->dev, host->slot_id, 1, 0,
-					 new_state == CARDSLEEP);
+					sleep);
 	/* FIXME: turn off bus power and perhaps interrupts too */
 	clk_disable(host->fclk);
 	host->dpm_state = new_state;
@@ -1376,14 +1396,18 @@ static int omap_hsmmc_disabled_to_enable
 
 static int omap_hsmmc_sleep_to_enabled(struct omap_hsmmc_host *host)
 {
+	int asleep;
+
 	if (!mmc_try_claim_host(host->mmc))
 		return 0;
 
 	clk_enable(host->fclk);
 	omap_hsmmc_context_restore(host);
+	asleep = omap_hsmmc_full_sleep(host->mmc->card) &&
+		(host->dpm_state == CARDSLEEP);
 	if (mmc_slot(host).set_sleep)
 		mmc_slot(host).set_sleep(host->dev, host->slot_id, 0,
-			 host->vdd, host->dpm_state == CARDSLEEP);
+					host->vdd, asleep);
 	if (mmc_card_can_sleep(host->mmc))
 		mmc_card_awake(host->mmc);
 
diff -Nurp kernel-2.6.28-20100903+0m5/drivers/net/wireless/wl12xx/wl1251_main.c kernel-2.6.28-20101501+0m5/drivers/net/wireless/wl12xx/wl1251_main.c
--- kernel-2.6.28-20100903+0m5/drivers/net/wireless/wl12xx/wl1251_main.c	2012-12-16 13:29:16.932315035 +0100
+++ kernel-2.6.28-20101501+0m5/drivers/net/wireless/wl12xx/wl1251_main.c	2012-12-16 13:30:14.172314148 +0100
@@ -1611,6 +1611,7 @@ static int wl1251_hw_scan(struct wl1251
 	}
 
 out:
+	kfree(trigger);
 	kfree(params);
 	return ret;
 
diff -Nurp kernel-2.6.28-20100903+0m5/drivers/net/wireless/wl12xx/wl1251_spi.c kernel-2.6.28-20101501+0m5/drivers/net/wireless/wl12xx/wl1251_spi.c
--- kernel-2.6.28-20100903+0m5/drivers/net/wireless/wl12xx/wl1251_spi.c	2012-12-16 13:28:34.816315688 +0100
+++ kernel-2.6.28-20101501+0m5/drivers/net/wireless/wl12xx/wl1251_spi.c	2012-12-16 13:30:14.172314148 +0100
@@ -92,6 +92,8 @@ void wl1251_spi_reset(struct wl1251 *wl)
 	spi_sync(wl->spi, &m);
 
 	wl1251_dump(DEBUG_SPI, "spi reset -> ", cmd, WSPI_INIT_CMD_LEN);
+
+	kfree(cmd);
 }
 
 void wl1251_spi_init(struct wl1251 *wl)
@@ -146,6 +148,8 @@ void wl1251_spi_init(struct wl1251 *wl)
 	spi_sync(wl->spi, &m);
 
 	wl1251_dump(DEBUG_SPI, "spi init -> ", cmd, WSPI_INIT_CMD_LEN);
+
+	kfree(cmd);
 }
 
 /* Set the SPI partitions to access the chip addresses
diff -Nurp kernel-2.6.28-20100903+0m5/net/mac80211/mlme.c kernel-2.6.28-20101501+0m5/net/mac80211/mlme.c
--- kernel-2.6.28-20100903+0m5/net/mac80211/mlme.c	2012-12-16 13:29:04.852315222 +0100
+++ kernel-2.6.28-20101501+0m5/net/mac80211/mlme.c	2012-12-16 13:30:14.172314148 +0100
@@ -1624,6 +1624,7 @@ static int ieee80211_sta_join_ibss(struc
 			memcpy(pos, &bss->supp_rates[8], rates);
 		}
 
+		kfree_skb(ifsta->probe_resp);
 		ifsta->probe_resp = skb;
 
 		ieee80211_if_config(sdata, IEEE80211_IFCC_BEACON);
